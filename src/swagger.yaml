openapi: 3.0.2
info:
  title: Recipes Backend
  description: |-
    Welcome to the Recipes Backend, a robust and feature-rich backend service designed to manage and serve delicious recipes to users. This application is built on the OpenAPI 3.1 specification, ensuring a well-structured and standardized API design.

    ## Overview

    The Recipes Backend is designed to handle a wide range of operations related to recipes. It can manage recipe data, including ingredients, preparation steps, and images. It also supports user management, allowing users to create accounts, save their favorite recipes, and share their own recipes.

    The application is built with a focus on performance, scalability, and security. It uses modern technologies and follows best practices to ensure it can handle high loads, scale as needed, and protect user data.

    ## Features

    - **Recipe Management**: Create, update, delete, and retrieve recipes. Each recipe includes ingredients, preparation steps, images, and more.
    - **User Management**: Handle user registration, authentication, and profile management. Users can save their favorite recipes and share their own.
    - **Search and Filter**: Users can search for recipes based on various criteria, such as ingredients, cooking time, and difficulty level.
    - **Image Handling**: Support for uploading and serving images. Each recipe can include multiple images.
    - **API Documentation**: Comprehensive API documentation based on the OpenAPI 3.0 specification.

    ## Technology Stack

    The Recipes Backend is built with a modern technology stack:

    - **Node.js**: A JavaScript runtime built on Chrome's V8 JavaScript engine.
    - **Express.js**: A fast, unopinionated, and minimalist web framework for Node.js.
    - **MongoDB**: A source-available cross-platform document-oriented database program.
    - **Mongoose**: An Object Data Modeling (ODM) library for MongoDB and Node.js.
    - **Swagger**: An Interface Description Language for describing RESTful APIs expressed using JSON.

    ## Getting Started

    To get started with the Recipes Backend, you can clone the repository and follow the setup instructions in the README.

    ## Repository

    The source code for the Recipes Backend is available on GitHub. You can find it at [https://github.com/abdul-haseeb123/recipe-share-backend/](https://github.com/abdul-haseeb123/recipe-share-backend/).

    We welcome contributions! If you have a feature request, bug report, or want to contribute to the code, please feel free to open an issue or pull request.

    ## Contact

    If you have any questions or feedback, please feel free to contact me at syedabdulhaseeb611@gmail.com.

  contact:
    email: syedabdulhaseeb611@gmail.com
  license:
    name: MIT
    url: https://github.com/abdul-haseeb123/recipe-share-backend/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Find out more on Github
  url: https://github.com/abdul-haseeb123/recipe-share-backend/
servers:
  - url: http://localhost:8000/api/v1
tags:
  - name: Seed Database with Random Data
    description: Operations about seeding database
  - name: users
    description: Operations about user
  - name: recipes
    description: Operations about recipes
  - name: reviews
    description: Operations about reviews

paths:
  /users/get-current-user:
    get:
      tags:
        - users
      summary: Get current logged in user
      description: Get current logged in user from cookies
      operationId: getCurrentUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: "Current user fetched successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /users/register:
    post:
      tags:
        - users
      summary: Create user
      description: Register A new user account.
      operationId: registerUser
      requestBody:
        description: Created user object
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
                - avatar
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                  format: binary
                coverImage:
                  type: string
                  format: binary

      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: "User registered successfully"
                  success:
                    type: boolean
                    example: true
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john@doe.com"
                password:
                  type: string
                  example: "johndoe123"

      responses:
        "200":
          description: User Logged In successfully
          headers:
            Set-Cookie:
              description: refreshToken
              schema:
                type: string
                example: "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJleHAiOjE3MTYxMzg4ODk4MDR9.J3gH5m-f7FQin17ArMtdwdabRoiAQgegL_XvTs96cPs; Path=/; HttpOnly;"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ1c2VybmFtZSI6ImpvaG5kb2UiLCJlbWFpbCI6ImpvaG5AZG9lLmNvbSIsImZpcnN0TmFtZSI6IkpvaG4iLCJsYXN0TmFtZSI6IkRvZSIsImV4cCI6MTcxNjEzODg4OTgwNH0.0_esczE1UBxd5F-YWz_CYKeWqE_EkyC4YSwoME1CgOo"
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJleHAiOjE3MTYxMzg4ODk4MDR9.J3gH5m-f7FQin17ArMtdwdabRoiAQgegL_XvTs96cPs"
                  message:
                    type: string
                    example: "User logged in successfully"
                  success:
                    type: boolean
                    example: true

        "400":
          description: Invalid email or password
  /users/logout:
    post:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        "200":
          description: User logged out successfully

          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "User logged out successfully"
                  success:
                    type: boolean
                    example: true
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refresh user token
      description: ""
      operationId: refreshAccessToken
      responses:
        "200":
          description: User token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ1c2VybmFtZSI6ImpvaG5kb2UiLCJlbWFpbCI6ImpvaG5AZG9lLmNvbSIsImZpcnN0TmFtZSI6IkpvaG4iLCJsYXN0TmFtZSI6IkRvZSIsImV4cCI6MTcxNjEzODg4OTgwNH0.0_esczE1UBxd5F-YWz_CYKeWqE_EkyC4YSwoME1CgOo"
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJleHAiOjE3MTYxMzg4ODk4MDR9.J3gH5m-f7FQin17ArMtdwdabRoiAQgegL_XvTs96cPs"
                  message:
                    type: string
                    example: "User token refreshed successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid token
        "401":
          description: Unauthorized
  /users/change-current-password:
    put:
      tags:
        - users
      summary: Change current user password
      description: Change current user password
      operationId: changeCurrentPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: "johndoe123"
                newPassword:
                  type: string
                  example: "johndoe1234"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "Password changed successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid password
        "401":
          description: Unauthorized

  /users/update:
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUserProfile
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: "Profile updated successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: First name or last name is required

  /users/update-cover:
    put:
      tags:
        - users
      description: Update user cover image, this can only be done by the logged in user
      operationId: updateCoverImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - coverImage
              properties:
                coverImage:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: Cover image updated successfully
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
  /users/update-avatar:
    put:
      tags:
        - users
      description: Update avatar image, this can only be done by the logged in user.
      operationId: updateAvatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: Cover image updated successfully
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
  /users/delete:
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserProfile
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "User deleted successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /recipes/:
    get:
      tags:
        - recipes
      description: Get all recipes
      operationId: getRecipes
      parameters:
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
            enum:
              - Breakfast recipes
              - Lunch recipes
              - Dinner recipes
              - Appetizer recipes
              - Salad recipes
              - Main-course recipes
              - Side-dish recipes
              - Baked-good recipes
              - Dessert recipes
              - Snack recipes
              - Soup recipes
              - Vegetarian recipes

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/RecipeList"
                  message:
                    type: string
                    example: "Recipes fetched successfully"
                  success:
                    type: boolean
                    example: true
    post:
      description: Create a new recipe
      tags:
        - recipes
      operationId: createRecipe
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - category
                - description
                - ingredients
                - instructions
                - recipeImages
                - coverImage

              properties:
                recipeImages:
                  type: array
                  items:
                    type: string
                    format: binary
                title:
                  type: string
                  example: Baked Sweet Potatoes
                category:
                  type: string
                  enum:
                    - Breakfast recipes
                    - Lunch recipes
                    - Dinner recipes
                    - Appetizer recipes
                    - Salad recipes
                    - Main-course recipes
                    - Side-dish recipes
                    - Baked-good recipes
                    - Dessert recipes
                    - Snack recipes
                    - Soup recipes
                    - Vegetarian recipes
                  example: Lunch recipes
                description:
                  type: string
                  example: "These baked sweet potatoes are easy to make and delicious to eat!"
                ingredients:
                  type: string
                  example: "4 sweet potatoes, 1/4 cup olive oil, 1/4 cup honey, 1/2 teaspoon cinnamon, 1/4 teaspoon nutmeg, 1/4 teaspoon cayenne pepper, 1/4 teaspoon salt, 1/4 teaspoon pepper"
                instructions:
                  type: string
                  example: "Preheat oven to 400 degrees F. Peel sweet potatoes and cut into 1-inch cubes. In a large bowl, combine olive oil, honey, cinnamon, nutmeg, cayenne pepper, salt, and pepper. Add sweet potatoes and toss to coat. Spread sweet potatoes in a single layer on a baking sheet. Bake for 30 minutes, stirring halfway through. Serve hot."
                coverImage:
                  type: string
                  format: binary
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Recipe"
                      - type: object
                        properties:
                          createdAt:
                            type: string
                            format: date-time
                            example: "2022-03-01T00:00:00.000Z"
                          updatedAt:
                            type: string
                            format: date-time
                            example: "2022-03-01T00:00:00.000Z"
                          __v:
                            type: integer
                            format: int32
                            example: 0
                          reviews:
                            type: array
                            items:
                              type: string
                            example: []
                          rating:
                            type: number
                            minimum: 1
                            maximum: 5
                            default: 1

                  message:
                    type: string
                    example: "Recipe created successfully"
                  success:
                    type: boolean
                    example: true
        "500":
          description: Internal server error
        "400":
          description: Invalid input
  /recipes/{recipeSlug}:
    get:
      tags:
        - recipes
      description: Get a recipe by Slug
      operationId: getRecipeBySlug
      parameters:
        - name: recipeSlug
          in: path
          description: Slug of recipe to return
          required: true
          schema:
            type: string
            format: uuid
            example: "baked-sweet-potatoes-550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/Recipe"
                  message:
                    type: string
                    example: "Recipe fetched successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
    put:
      tags:
        - recipes
      description: Update an existing recipe
      operationId: updateRecipe
      parameters:
        - name: recipeSlug
          in: path
          description: Slug of recipe to update
          required: true
          schema:
            type: string
            format: uuid
            example: "baked-sweet-potatoes-550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Baked Sweet Potatoes
                category:
                  type: string
                  enum:
                    - Breakfast recipes
                    - Lunch recipes
                    - Dinner recipes
                    - Appetizer recipes
                    - Salad recipes
                    - Main-course recipes
                    - Side-dish recipes
                    - Baked-good recipes
                    - Dessert recipes
                    - Snack recipes
                    - Soup recipes
                    - Vegetarian recipes
                  example: Lunch recipes
                description:
                  type: string
                  example: "These baked sweet potatoes are easy to make and delicious to eat!"
                ingredients:
                  type: string
                  example: "4 sweet potatoes, 1/4 cup olive oil, 1/4 cup honey, 1/2 teaspoon cinnamon, 1/4 teaspoon nutmeg, 1/4 teaspoon cayenne pepper, 1/4 teaspoon salt, 1/4 teaspoon pepper"
                instructions:
                  type: string
                  example: "Preheat oven to 400 degrees F. Peel sweet potatoes and cut into 1-inch cubes. In a large bowl, combine olive oil, honey, cinnamon, nutmeg, cayenne pepper, salt, and pepper. Add sweet potatoes and toss to coat. Spread sweet potatoes in a single layer on a baking sheet. Bake for 30 minutes, stirring halfway through. Serve hot."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: uuid
                      title:
                        type: string
                        example: Baked Sweet Potatoes
                      slug:
                        type: string
                        example: baked-sweet-potatoes-550e8400-e29b-41d4-a716-446655440000
                      category:
                        type: string
                        enum:
                          - Breakfast recipes
                          - Lunch recipes
                          - Dinner recipes
                          - Appetizer recipes
                          - Salad recipes
                          - Main-course recipes
                          - Side-dish recipes
                          - Baked-good recipes
                          - Dessert recipes
                          - Snack recipes
                          - Soup recipes
                          - Vegetarian recipes
                        example: Lunch recipes
                      description:
                        type: string
                        example: "These baked sweet potatoes are easy to make and delicious to eat!"
                      ingredients:
                        type: string
                        example: "4 sweet potatoes, 1/4 cup olive oil, 1/4 cup honey, 1/2 teaspoon cinnamon, 1/4 teaspoon nutmeg, 1/4 teaspoon cayenne pepper, 1/4 teaspoon salt, 1/4 teaspoon pepper"
                      instructions:
                        type: string
                        example: "Preheat oven to 400 degrees F. Peel sweet potatoes and cut into 1-inch cubes. In a large bowl, combine olive oil, honey, cinnamon, nutmeg, cayenne pepper, salt, and pepper. Add sweet potatoes and toss to coat. Spread sweet potatoes in a single layer on a baking sheet. Bake for 30 minutes, stirring halfway through. Serve hot."
                      images:
                        type: array
                        items:
                          $ref: "#/components/schemas/Image"
                      coverImage:
                        $ref: "#/components/schemas/Image"
                      owner:
                        type: string
                        format: uuid
                      reviews:
                        type: array
                        items:
                          type: string
                          format: uuid
                      createdAt:
                        type: string
                        format: date-time
                        example: "2022-03-01T00:00:00.000Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2022-03-01T00:00:00.000Z"
                      __v:
                        type: integer
                        format: int32
                        example: 0
                  message:
                    type: string
                    example: "Recipe updated successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
        "404":
          description: Recipe not found
    delete:
      tags:
        - recipes
      description: Delete a recipe
      operationId: deleteRecipe
      parameters:
        - name: recipeSlug
          in: path
          description: Slug of recipe to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "baked-sweet-potatoes-550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "Recipe deleted successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /reviews/{recipeSlug}:
    post:
      tags:
        - reviews
      description: Create a new review
      operationId: createReview
      parameters:
        - name: recipeSlug
          in: path
          description: Slug of recipe to review
          required: true
          schema:
            type: string
            format: uuid
            example: "baked-sweet-potatoes-550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
                - rating
              properties:
                comment:
                  type: string
                  example: "This recipe was delicious!"
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    $ref: "#/components/schemas/Review"
                  message:
                    type: string
                    example: "Review created successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
        "404":
          description: Recipe not found
    delete:
      tags:
        - reviews
      description: Delete a review
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          description: ID of review to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - reviewId
              properties:
                reviewId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: object
                    example: {}
                  message:
                    type: string
                    example: "Review deleted successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
        "404":
          description: Review not found
  /reviews/update:
    put:
      tags:
        - reviews
      description: Update an existing review
      operationId: updateReview
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - reviewId
                - comment
                - rating
              properties:
                reviewId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
                comment:
                  type: string
                  example: "This recipe was delicious!"
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: object
                    example: {}
                  message:
                    type: string
                    example: "Review updated successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
        "404":
          description: Review not found
  /seeds/users:
    post:
      tags:
        - Seed Database with Random Data
      summary: Seed users
      description: Seed users
      operationId: seedUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "Users seeded successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
  /seeds/recipes:
    post:
      tags:
        - Seed Database with Random Data
      summary: Seed recipes
      description: Seed recipes Note that you first need to seed users, to seed recipes
      operationId: seedRecipes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "Recipes seeded successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
  /seeds/reviews:
    post:
      tags:
        - Seed Database with Random Data
      summary: Seed reviews
      description: Seed reviews Note that you first need to seed users and recipes, to seed reviews
      operationId: seedReviews
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int16
                    example: 200
                  data:
                    type: integer
                    nullable: true
                  message:
                    type: string
                    example: "Reviews seeded successfully"
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid input
components:
  schemas:
    Image:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        asset_id:
          type: string
        public_id:
          type: string
        width:
          type: integer
          format: int64
          example: 1920
        height:
          type: integer
          format: int64
          example: 1080
        resource_type:
          type: string
          example: "image"
        tags:
          type: array
        url:
          type: string
          example: "http://www.gravatar.com/avatar/2c7d99fe281ecd3bcd65ab915bac6dd5"
        secure_url:
          type: string
          example: "https://www.gravatar.com/avatar/2c7d99fe281ecd3bcd65ab915bac6dd5"

    User:
      required:
        - username
        - firstName
        - lastName
        - email
        - avatar
      type: object
      properties:
        _id:
          type: string
          format: uuid
        username:
          type: string
          example: john_doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john@email.com
        avatar:
          $ref: "#/components/schemas/Image"
        coverImage:
          $ref: "#/components/schemas/Image"
      xml:
        name: user

    RecipeList:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        title:
          type: string
          example: Baked Sweet Potatoes
        category:
          type: string
          enum:
            - Breakfast recipes
            - Lunch recipes
            - Dinner recipes
            - Appetizer recipes
            - Salad recipes
            - Main-course recipes
            - Side-dish recipes
            - Baked-good recipes
            - Dessert recipes
            - Snack recipes
            - Soup recipes
            - Vegetarian recipes
          example: Lunch recipes
        coverImage:
          $ref: "#/components/schemas/Image"
        owner:
          type: string
          example: john_doe
        rating:
          type: number
          minimum: 1
          maximum: 5
    Recipe:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        title:
          type: string
          example: Baked Sweet Potatoes
        category:
          type: string
          enum:
            - Breakfast recipes
            - Lunch recipes
            - Dinner recipes
            - Appetizer recipes
            - Salad recipes
            - Main-course recipes
            - Side-dish recipes
            - Baked-good recipes
            - Dessert recipes
            - Snack recipes
            - Soup recipes
            - Vegetarian recipes
          example: Lunch recipes
        description:
          type: string
          example: "These baked sweet potatoes are easy to make and delicious to eat!"
        ingredients:
          type: string
          example: "4 sweet potatoes, 1/4 cup olive oil, 1/4 cup honey, 1/2 teaspoon cinnamon, 1/4 teaspoon nutmeg, 1/4 teaspoon cayenne pepper, 1/4 teaspoon salt, 1/4 teaspoon pepper"
        instructions:
          type: string
          example: "Preheat oven to 400 degrees F. Peel sweet potatoes and cut into 1-inch cubes. In a large bowl, combine olive oil, honey, cinnamon, nutmeg, cayenne pepper, salt, and pepper. Add sweet potatoes and toss to coat. Spread sweet potatoes in a single layer on a baking sheet. Bake for 30 minutes, stirring halfway through. Serve hot."
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
            examples:
              - $ref: "#/components/schemas/Image"

        coverImage:
          $ref: "#/components/schemas/Image"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        owner:
          type: string
          example: john_doe
        rating:
          type: number
          minimum: 1
          maximum: 5
    Review:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        recipe:
          type: string
          format: uuid
        comment:
          type: string
          example: "This recipe was delicious!"
        rating:
          type: number
          minimum: 1
          maximum: 5
        __v:
          type: integer
          format: int32
          example: 0
        createdAt:
          type: string
          format: date-time
          example: "2022-03-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2022-03-01T00:00:00.000Z"

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
